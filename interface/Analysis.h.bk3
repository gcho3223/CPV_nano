#ifndef ANALYSIS_H
#define ANALYSIS_H

#include <TChain.h>
#include <map>
#include <string>
#include <vector>

class Analysis {
public:
    // Constructor and destructor
    Analysis(TChain *chain, const std::string &branchListFile);
    ~Analysis() = default;

    // Event loop function
    void Loop();

private:
    // TChain pointer
    TChain *chain;

    // Maps to store branches
    std::map<std::string, Bool_t> boolBranches;
    std::map<std::string, Float_t> floatBranches;
    std::map<std::string, UInt_t> uintBranches; // For nMuon or other UInt_t variables
    std::map<std::string, Int_t> intBranches;

    // Vector pointers for vector-type branches
    std::map<std::string, std::vector<float>*> vectorFloatBranches;
    std::map<std::string, std::vector<int>*> vectorIntBranches;
    std::map<std::string, std::vector<bool>*> vectorBoolBranches;  // New for Boolean vectors

    // Specific branch pointers for convenience
    std::vector<float> *vmuon_pt = nullptr; 
    std::vector<float> *velectron_pt = nullptr;
    std::vector<float> *vjet_pt = nullptr;
    std::vector<bool> *vmuon_tightId = nullptr;
    std::vector<bool> *velectron_mvaFall17V2noIso_WP90 = nullptr;
    UInt_t nMuon = 0;                     

    // Branch setup functions
    void SetBranchAddresses();
    void LoadBranchList(const std::string &branchListFile); // Function to load branch list
};

#endif // ANALYSIS_H

